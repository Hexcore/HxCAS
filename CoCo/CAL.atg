import java.util.ArrayList;
import com.hexcore.cas.rulesystems.TableEntry;
import com.hexcore.cas.rulesystems.ConstantRecord;
import com.hexcore.cas.rulesystems.SymbolTable;
import com.hexcore.cas.rulesystems.PrimaryPair;
import com.hexcore.cas.rulesystems.TableEntry.Type;
import com.hexcore.cas.rulesystems.ArgList;
import org.objectweb.asm.Label;

COMPILER CAL $NC

static enum RelOpE{LT, GT, LE, GE, EQ, NE, UN};
static enum AddOpE{ADD, SUB, OR, UN};
static enum MulOpE{MUL, DIV, MOD, AND, UN};
static enum PostOpE{INC, DEC, UN};

static enum BehaviourType{MOVER, ACCEPTOR};

static SymbolTable table;
static int typeCountExpected = 0;
static int typeCountActual = 0;
static boolean firstTypeDone = false;
static boolean usingNStep = false;
static int stepCount = 0;
static int expectedStepCount = 0;
static boolean postOpQueued = false;
static PostOpE postOpType;
static boolean valid = true;
static int typeCount = 0;

static public int getErrorCount()
{
	return Errors.count;
}


static public ArrayList<String> getResult()
{
	ArrayList<String> results = Parser.getErrorList();
	if(Parser.getErrorCount() == 0)
		results.add("Compiled Successfully");
	
	return results;
}


static ArrayList<String> getErrorList()
{
	ArrayList<String> results = new ArrayList<String>();
		
	ErrorRec current = Errors.first;
	
	while(current != null)
	{
		results.add("Error at line " + current.line + ": " + current.str);
		current = current.next;
	}
	
	return results;
}

static void SemanticError(String msg)
{
	valid = false;
	SemError(msg);
	System.err.println("SEM ERROR");
}

static byte[] getCode()
{
	return CodeGen.getCode();
}

static public void reset()
{
	errDist = minErrDist;
	Errors.count = 0;
	Errors.first = null;
	Errors.last = null;
	Errors.eof = false;
	valid = true;
}


CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  lf = CHR(10) .

TOKENS
  number	= digit { digit } .
  double	= digit {digit}"."digit{digit} .
  postInc	= "++" .
  postDec	= "--" .
  
  identifier = letter { letter | digit } .
  
COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE CHR(0) .. CHR(31)


PRODUCTIONS
	/********* File Root *********/
	CAL										(. 	
												table = new SymbolTable();
												typeCount = 0;
												typeCountExpected = 0;
												firstTypeDone = false;
											.)				
  	=
  	RuleSet									(. 	
  												if(typeCount != typeCountExpected)
  												{
  													SemanticError("Mismatch between declared and actual type count");
  												}
  												
  												if(valid)
  												{
  													
  													CodeGen.endExecute();  													
  													if(usingNStep)
  													{
  														CodeGen.implementStepFunction(expectedStepCount);
  														CodeGen.implementSetStepForGenFunction(expectedStepCount);  														
  													}
  													else
  													{
  														CodeGen.implementStepFunction(1);
  														CodeGen.implementSetStepForGenFunction(1);
  													}
  													
  													CodeGen.implementResetStepFunction();
  													CodeGen.endClass();
  												}
  											.)
  	.
  	/*****************************/
  	
  	
  	
	/********** RuleSet **********/
  	RuleSet									(.
  												String name = "";
  												table.pushScope();
  												table.prepare();
  											.)
  	=
  	"ruleset" Ident< out name >				(. 	
  												if(valid)
  												{
  													CodeGen.initClass(name);
  													CodeGen.initExecute();
  												}
  											.)
  	"{"
	  	TypeHeader
	  	Property {Property}
	  	TypeSpec {TypeSpec}
  	"}"
  	.
  	/*****************************/
  	
  	
  	
  	
  	/********** Type Count Declaration **********/
  	TypeHeader								(. String name = ""; .)
  	=
  	"types"
  	"{"
  	Ident< out name >				(.
  										if(table.find(name).type != TableEntry.Type.NONE) SemanticError("Identifier \"" + name + "\" already declared.");
  										TableEntry entry = new TableEntry();
  										entry.name = name;
  										entry.kind = TableEntry.Kind.TYPENAME;
  										entry.type = TableEntry.Type.DOUBLE;
  										entry.immutable = true;
  										
  										if(valid)
  										{
  											entry.offset = CodeGen.declareLocalVariable(name);
  											CodeGen.loadConstantDouble(typeCountExpected);
  											CodeGen.storeVariable(entry.offset);
  										}
  											
  										table.insert(entry);
  										typeCountExpected++;
  									.)
  	{"," Ident< out name >			(.
  										if(table.find(name).type != TableEntry.Type.NONE) SemanticError("Identifier \"" + name + "\" already declared.");
  										entry = new TableEntry();
  										entry.name = name;
  										entry.kind = TableEntry.Kind.TYPENAME;
  										entry.type = TableEntry.Type.DOUBLE;
  										entry.immutable = true;
  										
  										if(valid)
  										{
  											entry.offset = CodeGen.declareLocalVariable(name);
  											CodeGen.loadConstantDouble(typeCountExpected);
  											CodeGen.storeVariable(entry.offset);
  										}
  											
  										table.insert(entry);
  										typeCountExpected++;
  									
  									.)
  	
  	}
  	"}"								(.											
										if(valid)
											CodeGen.initFramework(typeCountExpected);
  									.)
  	";"
  	.
	/********************************************/
  	
  	
  	/********** Cell Property **********/
  	Property								(. String name = ""; .)
  	=
  	"property" Ident< out name >			(.
  												if(table.find(name).type != TableEntry.Type.NONE) SemanticError("Identifier \"" + name + "\" already declared.");
  												TableEntry entry = new TableEntry();
  												entry.name = name;
  												entry.type = TableEntry.Type.DOUBLE;
  												entry.kind = TableEntry.Kind.PROPERTY;
  												if(valid)
  													entry.offset = CodeGen.declareProperty(name);
  												table.insert(entry);
  											.)  
  	";"
  	.
  	/***********************************/
  	
  	
  	
  
  	
  	/********** Type Specification **********/
  	TypeSpec								(.
  												table.pushScope();
  												String name = "";  												
  											.)
  	=
  	"type" Ident< out name >
  											(.
  												typeCount++;
  												if(typeCount > typeCountExpected)
  												{
  													SemanticError("Too many types");
  												}
  												
  												TableEntry entry;
  												entry = table.find(name);
  												if(entry.type == TableEntry.Type.NONE) SemanticError("Typename \"" + name + "\" has not been declared");
  												if(entry.kind != TableEntry.Kind.TYPENAME) SemanticError("Identifier \"" + name + "\" is not a declared typename");
  												
  												if(valid)
  													CodeGen.initType();
  											.)
  	"{"
  		(										(.
  													if(!firstTypeDone)
  														usingNStep = false;
  													else if(usingNStep == true)
  														SemanticError("Invalid Type Specification. You may not mix the use or non-use of the N-Step Engine. All types must make use of steps, or none at all.");
  												.)
  			{Statement} |  			
  			(									(.
  													int value = 0;
  													stepCount = 0;
  													
  													if(!firstTypeDone)
  														usingNStep = true;
  													else if(usingNStep == false)
  														SemanticError("Invalid Type Specification. You may not mix the use or non-use of the N-Step Engine. All types must make use of steps, or none at all.");
  														
  													Label nextStep = null;
  													Label end = new Label();
  														
  												.)
  				"step" IntConst < out value >		(.
  														if(value != stepCount)
  															SemanticError("Invalid step number. Steps must be declared in ascending order.");  															
  														stepCount++;
  														
  														if(valid)
  														{
  															nextStep = CodeGen.engineJump(value);
  														}
  													.)
  				Block								(.
  														if(valid)
  															CodeGen.jump(end);
  													.)
  				{
	  				"step" IntConst < out value > 	(.
	  													if(value != stepCount)
  															SemanticError("Invalid step number. Steps must be declared in ascending order.");  															
  														stepCount++;
  														
  														if(valid)
  														{
  															CodeGen.visitLabel(nextStep);
  															nextStep = CodeGen.engineJump(value);
  														}
  														
  													.)
	  				Block							(.
	  													if(valid)
	  														CodeGen.jump(end);
	  												.)
  				}
  			)										(.
  														if(valid)
  														{
  															CodeGen.visitLabel(nextStep);
  															CodeGen.visitLabel(end);
  														}
  													.)
  			{Statement}
  		)
  	"}"										(.
  												table.popScope();
  												
  												if(!firstTypeDone)
  												{
  													firstTypeDone = true;
  													
  													if(usingNStep)
  													{
  														expectedStepCount = stepCount;
  													}
  												}
  												else
  												{
  													if(usingNStep)
  													{
  														if(stepCount != expectedStepCount)
  															SemanticError("Invalid Type Specification. Each type must have the same number of steps.");
  													}
  												}
  												
  												if(valid)
  													CodeGen.endType();
  											.)
  	.
  	/****************************************/
  	
  	
  	
  	
  	/********** Statement Block **********/
  	Block 
  	=
  	"{"										(. table.pushScope(); .)
  		{Statement}
  	"}"										(. table.popScope(); .)
  	.
  	/*************************************/
  	
  	
  	
  	
  	
  	/********** STATEMENT **********/
  	Statement
  	=
  	 Block
  	 | AssignCall
  	 | IfStatement
  	 | Loop
  	 | VarDeclaration
  	 | Behaviour
  	.
  	/*******************************/
  	
  	
  	/********** Assignment or function call *********/
  	AssignCall									(. TableEntry entry = null; TableEntry.Type type = TableEntry.Type.NONE; ArgList args;.)
  	=
  	Designator< out entry, false >			(. PostOpE T = PostOpE.UN; .)
  	(
  		"=" Expression< out type >				(. 	
  													if(!(TableEntry.isArith(entry.type) && TableEntry.isArith(type)) && !(TableEntry.isBool(entry.type) && TableEntry.isBool(type)))
  													{
  														SemanticError("Incompatable Types");
  													}
  													else if(!(TableEntry.isArray(entry.type) && TableEntry.isArray(type)) && !(!TableEntry.isArray(entry.type) && !TableEntry.isArray(type)))
  													{
  														SemanticError("Cannot mix scalar and array types in assignment");
  													}
  													
  													if(entry.immutable)
  													{
  														SemanticError("Cannot assign to immutable symbol");
  													}
  													
  													if(valid)
  													{  															
	  													if(entry.kind == TableEntry.Kind.VARIABLE)
	  													{
	  														entry.type = type;
	  														CodeGen.storeVariable(entry.offset);
	  													}
	  													else if(entry.kind == TableEntry.Kind.PROPERTY)
	  													{
	  														if(entry.type != type)
  																CodeGen.convert(entry.type, type);
	  														CodeGen.storeProperty(entry.offset);
	  													}
	  													else if(entry.kind == TableEntry.Kind.ARRAY)
	  													{
	  														CodeGen.storeArray();
	  													}
  													}
  												.)
  		| PostOp< out T >						(. 
  													if(!TableEntry.isArith(entry.type))
  														SemanticError("Cannot perform a post operation on a boolean type.");
  														
  													if(entry.immutable)
  													{
  														SemError("Cannot alter immutable symbol");
  													}
  														
  													if(entry.kind != TableEntry.Kind.VARIABLE)
  													{
  														SemanticError("Can only perform post operation on a variable.");
  													}
  													else
  													{
  														if(valid)
  														{
	  														if(T == PostOpE.INC)
	  															CodeGen.performPostOp(entry.offset, 1);
	  														else
	  															CodeGen.performPostOp(entry.offset, -1);
  														}
  													}
  												.)
  		| "(" Arguments< out args >			(.	if(entry.kind != TableEntry.Kind.METHOD)
  												{
  													SemanticError("Arguments can only be given to a function.");
  												}
  												
  												if(!entry.checkArguments(args))
  												{
  
  													SemanticError("Function \"" + entry.name + "\" has arguments:\n" + entry.arguments +
  													"\n provided arguments:\n" +
  													args);
  												}
  												
  												if(valid)
  												{
  													CodeGen.invokeStdLibFunction(entry.name, args, entry.type);
  													if(entry.type != TableEntry.Type.VOID)
  													{
  														CodeGen.pop(entry.type);
  													}
  												}
  											.)
  		
  		")"
  	)
  	";"
  	.
  	/*************************************************/
  	
  	
  	
  	
  	/********** Declared Designator *********/
  	Designator<. out TableEntry entry, boolean attr .>	(.
			  													TableEntry.Type type = TableEntry.Type.NONE;
			  													TableEntry.Type typeE = TableEntry.Type.NONE;
			  													String name = "";
			  													TableEntry entryA = null;
			  												.)
  	=
  	Ident< out name >							(.

  													entry = table.find(name);
  													if(entry.type == TableEntry.Type.NONE)
  														SemanticError("Undeclared identifier \"" + name + "\"");
  													else
  														type = entry.type;
  														
  													if(entry.kind == TableEntry.Kind.PROPERTY && attr == false)
  														SemanticError("Properties must be called with \"self\"");
  														
  														
  													if(entry.kind == TableEntry.Kind.CELL)
  														if(valid)
		  													CodeGen.derefRef(entry.offset);
		  													
		  											if(entry.kind == TableEntry.Kind.ARRAY)
		  											{
		  												if(valid)
		  													CodeGen.derefRef(entry.offset);
  													}
  												.)
  													 
  	[
  		"["												
  			Expression< out typeE >				(. if(TableEntry.isScalar(type)) SemanticError("Cannot index scalar type \"" + name +  "\"");
  													if(!TableEntry.isArith(typeE))
  													{
  														SemanticError("Index must be arithmetic");  														
  													}
  													
  													if(typeE == TableEntry.Type.DOUBLE)
													{
														CodeGen.convert(TableEntry.Type.INT, TableEntry.Type.DOUBLE);
													}
  													
  													if(valid)
  													{
  														if(type == TableEntry.Type.CELL_ARR)
  															CodeGen.derefArrayRef();
  													}
  												.)
  												
  												
  		"]"										(.
  													if(!TableEntry.isArray(type))
  													{
  														SemanticError("Can only index arrays");
  													}
  													TableEntry entryS = new TableEntry();
  													entryS.name = entry.name;
  													entryS.kind = entry.kind;
  													entryS.type = TableEntry.Type.values()[(entry.type.ordinal() - 1)];
  													entry = entryS;
  												.)
  	]
  	[  	
  		"." Attribute< out entryA > 				(.
  														if(entry.kind != TableEntry.Kind.CELL) SemanticError("Only cells have attributes.");
  														if(entryA.kind != TableEntry.Kind.PROPERTY) SemanticError("Only declared properties can be used as cell attributes.");
  														TableEntry entryAA = new TableEntry();
  														entryAA.name = entryA.name;
  														entryAA.kind = entryA.kind;
  														entryAA.offset = entryA.offset;
  														if(TableEntry.isArray(entry.type))
  														{
  															entryAA.type = TableEntry.Type.values()[(entryA.type.ordinal() + 1)];
  														}
  														else
  														{
  															entryAA.type = entryA.type;
  														}
  														
  														entry = entryAA;
  													.)
  	]
  	.
  	/****************************************/
  	
  	
  	
  	/********** Cell Attribute *********/
  	Attribute<. out TableEntry entry .>
  	=
  	Designator< out entry, true >
  	.
  	/***********************************/
  	
  	
  	
  	/********** If Statement *********/
  	IfStatement									(. TableEntry.Type type = TableEntry.Type.NONE; .)
  	=
  	"if" "("
  	Expression< out type > 
  	")"											(. 
  													if (!TableEntry.isBool(type))
  													{
  														SemanticError("Expected a boolean result for the if statement's expression");
  													}
  	
  													Label[] pointers = null;	
  													if(valid)
  													{	
  														pointers = CodeGen.initIf();
  													}
  												.)
  												
  	Statement									(.
  													if(valid)
  													{
  														CodeGen.jump(pointers[1]); 
  														CodeGen.visitLabel(pointers[0]);
  													}
  												.)
  	[
  	"else" Statement							
  	]											(.
  													if(valid)
  														CodeGen.visitLabel(pointers[1]);
  												.)
  	.
  	/*********************************/
  	
  	
  	/********** Loop *********/
  	Loop										(.
  													TableEntry.Type type1 = TableEntry.Type.INT, type2 = TableEntry.Type.INT;
  													String name = "";
  													Label[] loopLabels = null;
  													TableEntry entry = new TableEntry();
  												.)
  	=
  	"loop" Ident< out name > 					(.
  													if(table.find(name).type != TableEntry.Type.NONE)
  													{
  														SemError("Redeclared identifier");
  													}
  													
  													if(valid)
  													{  														
  														entry.kind = TableEntry.Kind.VARIABLE;
  														entry.name = name;
  														entry.type = TableEntry.Type.DOUBLE;
  														entry.immutable = true;
  														table.insert(entry);
  														entry.offset = CodeGen.declareLoopVariables();
  													}
  												.)
  	"from" Expression< out type1 >				(.
  													if(type1 == TableEntry.Type.INT)
  														CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  												.)
  	"to" Expression< out type2 >				(.
  													if(!TableEntry.isArith(type1) || !TableEntry.isArith(type2))
  													{
  														SemError("Loop bounds must be arithmetic expressions");
  													}
  													
  													if(TableEntry.isArray(type1) || TableEntry.isArray(type2))
  													{
  														SemError("Loop bounds must be scalar");
  													}
  													
  													if(type2 == TableEntry.Type.INT)
  														CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													
  													if(valid)
  													{
  														loopLabels = CodeGen.initLoop(entry.offset);
  													}
  												.)
  	Statement									(.
  													if(valid)
  														CodeGen.endLoop(loopLabels, entry.offset);
  												.)
  	.
  	/*************************/
  	
  	
  	/*****Behaviour Block*****/
  	Behaviour								(.
  												TableEntry entry = null;
  												ArgList args = null;
  											.)
  	=
  	"behaviour" 
  	Designator< out entry, false >			(.
  												if(entry.kind != TableEntry.Kind.BEHAVIOUR)
  												{
  													SemanticError("Behaviour \"" + entry.name + "\" does not exist.");
  												}
  											.)
  	"("
  		Arguments< out args >				(.
  												if(entry.name.equals("move") || entry.name.equals("accept"))
  													args.add(TableEntry.Type.INT);
  													
  												args.add(TableEntry.Type.CELL);
  												args.add(TableEntry.Type.CELL_ARR);
  												if(!entry.checkArguments(args))
  													SemanticError("Invalid use of behaviour");
  												if(valid)
  												{
  													if(entry.name.equals("move") || entry.name.equals("accept"))
  														CodeGen.loadField("moveStep");
  														
  													CodeGen.derefRef(1);
  													CodeGen.derefRef(2);
  													
  													CodeGen.invokeStdLibFunction(entry.name, args, entry.type);
  												}	
  												
  											.)
  	")"
  	";"
  	.
  	
  	/*
  	Behaviour								(.	
  	         								  	TableEntry.Type type = null;
  	         								   	TableEntry.Type typeR = null;
  	         								   	BehaviourType b = null;
  	         								.)
  	=
  	(
  	"move"									(.	b = BehaviourType.MOVER;
  											.)
  												
  	|
  	"accept"								(.	b = BehaviourType.ACCEPTOR;
  											.)
  	)
  	"(" Expression< out type >				(.	if(type != TableEntry.Type.BOOL)
  													SemanticError("Behavioral condition must be of boolean type.");
  											.)
  												
  	")"
  	"{"
  		{Statement}					
  		"return" Expression< out typeR >	(.
  												if(typeR != TableEntry.Type.INT || typeR != TableEntry.Type.DOUBLE)
  													SemanticError("Must return a numeric type");
  											.)
  	"}"
  	.
  	*/
  	
  	
  	/*************************/
  	
  	
  	
  	/********** Variable Declaration *********/
  	VarDeclaration
  	=
  	(
 	"var"
	OneVar
	{
	"," OneVar
	}
	|
	"array"
	ArraySpec
	)
	";"
	.
  	
  	/*****************************************/
  	
  	
  	
  	/********** Expression **********/
  	Expression<. out Type type .>			(. 	
  	                                        			   	TableEntry.Type type1, type2;
  															type = TableEntry.Type.NONE;
  														.)
  	=
  	AddExp< out type1 >						(.
  												RelOpE op = RelOpE.UN;
  												type = type1;
  											.) 
  	[
  	RelOp< out op >							(.
  												if(type1 == TableEntry.Type.INT)
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  											.)					
  	AddExp< out type2 >						(.
  												if(!(TableEntry.isArith(type1) && TableEntry.isArith(type2)) && !(TableEntry.isBool(type1) && TableEntry.isBool(type2)))
  												{
  													SemanticError("Type mismatch");
  													type = TableEntry.Type.NONE;
  												}
  												
  												if(type2 == TableEntry.Type.INT)
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													
  												type = TableEntry.Type.BOOL;
  												
  												if(valid)
  													CodeGen.performRelationalOp(op);										
  											.)
  	]
  	.
  	/********************************/
  	
  	
  	
  	/********** Add-Based Expression **********/
  	AddExp<. out Type type .>				(.
  												TableEntry.Type type1, type2;
  												type = TableEntry.Type.NONE;
  												boolean negative = false;
  											.)
  	=
  	["+" | "-"								(. negative = true; .)
  	]
  	Term< out type1 >						(.
  												AddOpE op = AddOpE.UN;
  												type = type1;
  												
  												
  												if(type1 == TableEntry.Type.INT)
  												{
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													type = TableEntry.Type.DOUBLE;
  													type1 = TableEntry.Type.DOUBLE;
  												}
  												
  												if(negative)
  												{
	  												if(!TableEntry.isArith(type1))
	  													SemanticError("Cannot negate a boolean type");
	  												else
	  													if(valid)
	  														CodeGen.negate();
  												}
  											.)
  	{
  	AddOp< out op > 
  	Term< out type2 >						(.
  												if(type2 == TableEntry.Type.INT)
												{
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													type = TableEntry.Type.DOUBLE;
  													type2 = TableEntry.Type.DOUBLE;
												}
												
  												switch(op)
  												{  												
  													case OR:
  														if(!TableEntry.isBool(type1) || !TableEntry.isBool(type2))
  															SemanticError("Boolean Types Required");
  														type = TableEntry.Type.BOOL;
  														break;
  													default:
  														if(!TableEntry.isArith(type1) || !TableEntry.isArith(type2))
  															SemanticError("Numeric Types Required");
  														type = TableEntry.Type.DOUBLE;
  												}
  												
  												if(valid)
  													CodeGen.performAddOp(op);
  											.)
  	}
  	.
  	/******************************************/
  	
  	
  	
  	
  	
  	/********** Terms **********/
  	Term<. out Type type .>					(.
  												TableEntry.Type type1, type2;
  												type = TableEntry.Type.NONE; 
  											.)
  	=
  	Factor< out type1 >						(.
  												MulOpE op = MulOpE.UN;
  												type = type1;
  											.)
  	{
  	MulOp< out op >							(.
  												if(type1 == TableEntry.Type.INT)
  												{
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													type = TableEntry.Type.DOUBLE;
  													type1 = TableEntry.Type.DOUBLE;
  												}
  											.)
  	Factor< out type2 >						(.
  	
  												if(type2 == TableEntry.Type.INT)
  												{
  													CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
  													type = TableEntry.Type.DOUBLE;
  													type2 = TableEntry.Type.DOUBLE;
  												}
  												switch(op)
  												{
  													case AND:
  														if(!TableEntry.isBool(type1) || !TableEntry.isBool(type2))
  															SemanticError("Boolean Types Required");
  														type = TableEntry.Type.BOOL;
  														break;
  													default:
  														if(!TableEntry.isArith(type1) || !TableEntry.isArith(type2))
  															SemanticError("Numeric Types Required");
  														type = TableEntry.Type.DOUBLE; 														
  												}
  												
  												if(valid)
  													CodeGen.performMulOp(op);
  											.)
  	}
  	.
  	/**********************************/
  	
  	
  	
  	
  	
  	
  	/********** Factors **********/
  	Factor<. out Type type .>				(.
  												PostOpE T = PostOpE.UN;
  												PrimaryPair p = new PrimaryPair();
  											.)
  	=
  	Primary< out p >						(. type = p.type; .)
  	[
  	PostOp< out T >							(.
  												if(!TableEntry.isArith(type)) SemanticError("Cannot perform a post operation on a boolan type.");
  								
  												if(p.kind != TableEntry.Kind.VARIABLE)
  												{
  													SemanticError("Can only perform post operations on a variable.");
  												}
												else
												{
													if(p.type == TableEntry.Type.INT)
													{
														CodeGen.convert(TableEntry.Type.DOUBLE, TableEntry.Type.INT);
														type = TableEntry.Type.DOUBLE;
													}
													
													if(valid)
													{
														if(T == PostOpE.INC)
														{
															CodeGen.performPostOp(p.offset, 1);
														}
														else
														{
															CodeGen.performPostOp(p.offset, -1);
														}
													}
												}
  											.)
  	]
  	.
  	/*****************************/
  	
  	
  	
  	/********** PRIMARY ELEMENT **********/
  	Primary<. out PrimaryPair p .>			(.
  												p = new PrimaryPair();
  												p.type = TableEntry.Type.NONE;
  												
  												ArgList args = null;
  												TableEntry.Type typeE = TableEntry.Type.NONE;
  												
  												ConstantRecord con;
  												TableEntry entry = null;
  											.)
  	=
  	Designator< out entry, false >		(.
  												p.type = entry.type;
  												p.kind = TableEntry.Kind.VARIABLE;
  												p.offset = entry.offset;
  												
  												
  												if(valid)
  												{
	 												if(entry.kind == TableEntry.Kind.VARIABLE || entry.kind == TableEntry.Kind.TYPENAME)
			  											CodeGen.derefVariable(entry.offset);		  											 
			  										else if(entry.kind == TableEntry.Kind.PROPERTY)
			  										{
			  											if(TableEntry.isArray(entry.type))
			  												CodeGen.generatePropertyArray(entry.offset);
			  											else
			  												CodeGen.derefProperty(entry.offset);
			  										}
			  										else if(entry.kind == TableEntry.Kind.ARRAY)
  													{
  														if(!TableEntry.isArray(entry.type))
  															CodeGen.derefArrayDouble(); 														
  													}
			  									}
  											.)
  	[
  	"("		
  		Arguments< out args >				(.	
   												if(entry.kind != TableEntry.Kind.METHOD)
  												{
  													SemanticError("Arguments can only be given to a function.");
  												}
  												
												
												if(!entry.checkArguments(args))
  												{
  
  													SemanticError("Function \"" + entry.name + "\" has arguments:\n" + entry.arguments +
  													"\n provided arguments:\n" +
  													args);
  												}
  												p.kind = TableEntry.Kind.CONSTANT;
  												
  												if(valid)
  												{
  													CodeGen.invokeStdLibFunction(entry.name, args, entry.type);
  												}
  											
  											.)
  	")"										
  	]										
  	|
  	Constant< out con >						(.
  												p.type = con.type;
  												p.kind = TableEntry.Kind.CONSTANT;
  												
  												if(valid)
  												{
  													if(con.type == TableEntry.Type.INT)
  														CodeGen.loadConstantInteger((int)con.value);
  													else if(con.type == TableEntry.Type.DOUBLE)
  														CodeGen.loadConstantDouble(con.value);
  												}
  											.)
  	|
  	"(" Expression< out typeE >				(.
  												p.type = typeE;
  												p.kind = TableEntry.Kind.CONSTANT;
  											.)
  	")"										
  	.
  	/*************************************/
  	
  	
  	
  	
  	/********** Contant **********/
  	Constant<. out ConstantRecord con .>	(. 	
  												con = new ConstantRecord();
  											.)
  	=
  	DoubleConst< out con.value >			(.	con.type = TableEntry.Type.DOUBLE;	.)
	| IntConst< out con.value >				(.	con.type = TableEntry.Type.INT;		.)
  	.
  	/*****************************/
  	
  	
  	
  	
  	/********** ARGUMENTS **********/
  	Arguments<. out ArgList types .>				(. types = new ArgList(); TableEntry.Type type = null;.)
  	=
  	[
  		Expression< out type >						(.	types.add(type); .)
  		
  		
  		
  		{"," Expression< out type >					(. types.add(type); .)
  		}
  	]
  	.
  	/*******************************/
  	
  	
  	
  	
  	/********** Operators **********/
  	RelOp<. out RelOpE op .>				(. op = RelOpE.UN;	.)
  	=
  	"=="									(. op = RelOpE.EQ;	.)
  	| "!="									(. op = RelOpE.NE;	.)
  	| ">"									(. op = RelOpE.GT;	.)
  	| "<"									(. op = RelOpE.LT;	.)
  	| ">="									(. op = RelOpE.GE;	.)
  	| "<="									(. op = RelOpE.LE;	.)
  	.
  	
  	
  	
  	AddOp<. out AddOpE op .>				(. op = AddOpE.UN;	.)
  	=
  	"+"										(. op = AddOpE.ADD;	.)
  	| "-"									(. op = AddOpE.SUB;	.)
  	| "||"									(. op = AddOpE.OR;	.)
  	.
  	
  	
  	
  	MulOp<. out MulOpE op .>				(. op = MulOpE.UN;	.)
  	=
  	"*"										(. op = MulOpE.MUL;	.)
  	| "/"									(. op = MulOpE.DIV;	.)
  	| "%"									(. op = MulOpE.MOD;	.)
  	| "&&"									(. op = MulOpE.AND;	.)
  	.
  	
  	
  	
  	PostOp<. out PostOpE op .>				(. op = PostOpE.UN;	.)
  	=
  	postInc									(. op = PostOpE.INC;	.)
  	| 
  	postDec									(. op = PostOpE.DEC;	.)
  	.
  	/*******************************/
  	
  	
  	
  	
  	
  	/********** Single Variable **********/
  	OneVar									(. TableEntry.Type type = TableEntry.Type.NONE; String name = ""; .)
  	=
  	Ident< out name >						(.
  												TableEntry entry = new TableEntry();
  												entry.name = "__new__";
  												
  												if(table.find(name).type != TableEntry.Type.NONE) 
  													SemanticError("Identifier \"" + name + "\" already declared.");
  												else
  												{
  													entry.kind = TableEntry.Kind.VARIABLE;
  													entry.type = TableEntry.Type.INT;
  													entry.name = name;
  													entry.offset = CodeGen.declareLocalVariable(name);
  												}
  											.)
  	[
  	"=" Expression< out type >				(.
  												if(!entry.name.equals("__new__"))
  												{
  													entry.kind = TableEntry.Kind.VARIABLE;
  													entry.type = type;
  												}
  												
  												if(valid)
  													CodeGen.storeVariable(entry.offset);
  											.)
  											
  	]										(.
  												if(!entry.name.equals("__new__"))
  													table.insert(entry);
  											.)
  	.
  	/*************************************/
  	
  	
  	
  	/**********Array Declaration**********/
  	ArraySpec								(. String name = "";
  	         								   int size = -1;
  	         								.)
  	=
  	Ident< out name >						(.
  												TableEntry entry = new TableEntry();
  												entry.name = "__new__";
  												
  												if(table.find(name).type != TableEntry.Type.NONE) 
  													SemanticError("Identifier \"" + name + "\" already declared.");
  												else
  												{
  													entry.kind = TableEntry.Kind.ARRAY;
  													entry.type = TableEntry.Type.DOUBLE_ARR;
  													entry.name = name;
  												}
  											.)
  	"["
  	IntConst< out size >					(.
  												if(size < 1)
  													SemanticError("Array size must be 1 or greater");
  											.)
  	"]"										(.
  												if(valid)
  												{
  													entry.offset = CodeGen.declareArray(size);
  													table.insert(entry);  													
  												}
  											.)
  	[
  	"="
  	"{"										(. 
  												int initted = 0;
  												ConstantRecord con = new ConstantRecord();
  												if(valid)
  												{
	  												CodeGen.derefRef(entry.offset);
	  												CodeGen.loadConstantInteger(initted++);
  												}
  											.)
  											
  	Constant < out con >					(. 
  												if(valid)
  												{
  													CodeGen.loadConstantDouble(con.value); 											
  													CodeGen.storeArray();
  												}
  											.)
  	{										(. 	
  												if(initted >= size)
  													SemanticError("Too many initializations");
  													
  												if(valid)
  												{
  													CodeGen.derefRef(entry.offset);
  													CodeGen.loadConstantInteger(initted++);
  												}
  											.)
  	","
  											
  	Constant< out con >						(.	
  												if(valid)
  												{
  													CodeGen.loadConstantDouble(con.value);
  													CodeGen.storeArray();
  												}
  											.)									
  	}
  	"}"
  	]
  	.
  	
  	/*************************************/
  	
  	/********** Double Constant **********/
  	DoubleConst<. out double value .>		
  	=
	double									(.
												try
												{
													value = Double.parseDouble(token.val);
												} catch(NumberFormatException e)
												{
													value = 0;
												}
												
											.)
  	.
  	/*************************************/
  	
  	
  	
  	/********** Integer Constant **********/
  	IntConst<. out int value .>
  	=
  	number									(.
  												try
  												{
  													value = Integer.parseInt(token.val);
  												}
  												catch(NumberFormatException e)
  												{
  													value =  0;
  												} 
  											.)
  	.
  	/**************************************/
	
	
	
	/********** Identifier **********/
  	Ident<. out String name .>				(.
  												name = "";
  											.)
  	=
  	identifier								(.
  												name = token.val;
  											.)
  											
  	|
  	"type"									(. name = "type"; .)
  	.
	/********************************/
  	

END CAL.

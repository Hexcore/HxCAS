import library.*;
import java.util.ArrayList;

COMPILER CAL $NC

static enum RelOpE{LT, GT, LE, GE, EQ, NE, UN};
static enum AddOpE{ADD, SUB, OR, UN};
static enum MulOpE{MUL, DIV, MOD, AND, UN};
static enum PostOpE{INC, DEC, UN};

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .		
  
  identifier = letter { letter | digit } .
  
COMMENTS FROM "/*" TO "*/"

IGNORE CHR(0) .. CHR(31)


PRODUCTIONS
	CAL
  	=
  	RuleSet
  	[ColourSet]
  	.
  	
  	

  	RuleSet
  	=
  	"ruleset" identifier
  	"{"
  	Property {Property}
  	TypeSpec {TypeSpec}
  	"}"
  	.
  	
  	ColourSet
  	=
  	"colourset" identifier
  	"{"
  		{PropertySpec}
  	"}"
  	.
  	
  	
  	
  	Property
  	=
  	"property" identifier ";"
  	.
  	
  
  	PropertySpec
  	=
  	"property" identifier
  	"{"
  		RangeSet {RangeSet}
  	"}"
  	.
  	
  	RangeSet
  	=
  	number ".." number
  	":"
  	Colour
  	";"
  	.
  	
  	Colour
  	=
  	"rgb("
  	DoubleConst "," DoubleConst "," DoubleConst
  	")"
  	.
  
  	
  	
  	TypeSpec
  	=
  	"type" identifier ":" number
  	"{"
  		{Statement}
  	"}"
  	.
  	
  	
  	
  	Block 
  	=
  	"{"
  		{Statement}
  	"}"
  	.
  	
  	
  	
  	Statement
  	=
  	 Block
  	 | AssignCall
  	 | IfStatement
  	 | VarDeclaration 
  	.
  	
  	
  	
  	AssignCall
  	=
  	Designator						(. PostOpE T = PostOpE.UN; .)
  	(
  		"=" Expression
  		| PostOp< out T >
  		| "(" Arguments ")"
  	)
  	";"
  	.
  	
  	
  	
  	Designator
  	=
  	identifier
  	[
  		("." Attribute) | "[" Expression "]"
  	]
  	.
  	
  	
  	
  	Attribute
  	=
  	Designator
  	.
  	
  	
  	
  	IfStatement
  	=
  	"if" "("
  	Expression ")"
  	Statement
  	[
  	"else" Statement
  	]
  	.
  	
  	
  	
  	VarDeclaration
  	=
 	"var"
	OneVar
	{
	"," OneVar
	}
	";"
	.
  	
  	
  	
  	Expression
  	=
  	AddExp							(. RelOpE T = RelOpE.UN; .) 
  	[RelOp< out T >
  	 AddExp]
  	.
  	
  	
  	
  	AddExp
  	=
  	["+" | "-"]
  	Term							(. AddOpE T = AddOpE.UN; .)
  	{AddOp< out T > 
  	Term}
  	.
  	
  	
  	
  	Term
  	=
  	Factor							(. MulOpE T = MulOpE.UN; .)
  	{MulOp< out T >
  	Factor}
  	.
  	
  	
  	
  	Factor
  	=
  	Designator
  	["(" Arguments ")"]
  	|
  	Constant
  	| "(" Expression ")"
  	.
  	
  	
  	
  	Constant
  	=
  	DoubleConst
  	.
  	
  	
  	
  	Arguments
  	=
  	[
  		Expression 
  		{"," Expression}
  	]
  	.
  	
  	
  	
  	RelOp<. out RelOpE type .>		(. type = RelOpE.UN;	.)
  	=
  	"=="							(. type = RelOpE.EQ;	.)
  	| "!="							(. type = RelOpE.NE;	.)
  	| ">"							(. type = RelOpE.GT;	.)
  	| "<"							(. type = RelOpE.LT;	.)
  	| ">="							(. type = RelOpE.GE;	.)
  	| "<="							(. type = RelOpE.LE;	.)
  	.
  	
  	
  	
  	AddOp<. out AddOpE type .>		(. type = AddOpE.UN;	.)
  	=
  	"+"								(. type = AddOpE.ADD;	.)
  	| "-"							(. type = AddOpE.SUB;	.)
  	| "||"							(. type = AddOpE.OR;	.)
  	.
  	
  	
  	
  	MulOp<. out MulOpE type .>		(. type = MulOpE.UN;	.)
  	=
  	"*"								(. type = MulOpE.MUL;	.)
  	| "/"							(. type = MulOpE.DIV;	.)
  	| "%"							(. type = MulOpE.MOD;	.)
  	| "&&"							(. type = MulOpE.AND;	.)
  	.
  	
  	
  	
  	PostOp<. out PostOpE type .>	(. type = PostOpE.UN;	.)
  	=
  	"++"							(. type = PostOpE.INC;	.)
  	| "--"							(. type = PostOpE.DEC;	.)
  	.
  	
  	
  	
  	OneVar
  	=
  	identifier
  	[
  	"=" Expression
  	]
  	.
  	
  	
  	
  	DoubleConst
  	=
  	number
  	[
  	"." number
  	]
  	.
  	
  
  	
  
  	

END CAL.
